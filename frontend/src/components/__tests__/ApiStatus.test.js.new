/**
 * ApiStatus Component Tests
 *
 * Tests for the ApiStatus component functionality including:
 * - Rendering
 * - API status checking
 * - Error handling
 */

import React from 'react';
import { render, screen, waitFor, act } from '@testing-library/react';
import '@testing-library/jest-dom';
import { rest } from 'msw';
import { server } from '../../tests/mocks/server';
import ApiStatus from '../ApiStatus';
import { wait } from '../../tests/utils/testUtils';

describe('ApiStatus Component', () => {
  it('should render loading state initially', async () => {
    // Override the server to delay responses
    server.use(
      rest.get('/api/health', (req, res, ctx) => {
        return res(ctx.delay('infinite'));
      })
    );

    await act(async () => {
      render(<ApiStatus />);
    });

    // Check for loading indicators
    expect(screen.getByText(/Server:/i)).toBeInTheDocument();
    expect(screen.getAllByText(/Checking.../i).length).toBeGreaterThan(0);
  });

  it('should show online status when API is available', async () => {
    // The default handlers in MSW will return successful responses

    await act(async () => {
      render(<ApiStatus />);
    });

    // Wait for API checks to complete
    await waitFor(() => {
      expect(screen.getByText(/Server:/i)).toBeInTheDocument();
    });

    // Wait for the status to be updated
    await waitFor(() => {
      expect(screen.getByText(/Online/i)).toBeInTheDocument();
    }, { timeout: 3000 });

    // Wait for the crops API status to be updated
    await waitFor(() => {
      const cropsElement = screen.getByText(/Crops API:/i).nextSibling;
      expect(cropsElement).toHaveTextContent(/Online/i);
    }, { timeout: 3000 });

    // Wait for the climate zones API status to be updated
    await waitFor(() => {
      const climateElement = screen.getByText(/Climate Zones API:/i).nextSibling;
      expect(climateElement).toHaveTextContent(/Online/i);
    }, { timeout: 3000 });
  });

  it('should show offline status when server is down', async () => {
    // Override the server to return an error for the health endpoint
    server.use(
      rest.get('/api/health', (req, res, ctx) => {
        return res(ctx.status(500), ctx.json({ success: false, error: 'Server Error' }));
      })
    );

    await act(async () => {
      render(<ApiStatus />);
    });

    // Wait for API checks to complete
    await waitFor(() => {
      expect(screen.getByText(/Server:/i)).toBeInTheDocument();
    });

    // Wait for the status to be updated
    await waitFor(() => {
      const offlineElements = screen.getAllByText(/Offline/i);
      expect(offlineElements.length).toBeGreaterThan(0);
    }, { timeout: 3000 });

    // Check for error message
    await waitFor(() => {
      expect(screen.getByText(/Server Connection Issue/i)).toBeInTheDocument();
      expect(screen.getByText(/Troubleshooting Tips:/i)).toBeInTheDocument();
    }, { timeout: 3000 });
  });

  it('should show partial status when some endpoints are down', async () => {
    // Override the server to return an error for the climate zones endpoint
    server.use(
      rest.get('/api/forecast/climate-zones', (req, res, ctx) => {
        return res(ctx.status(500), ctx.json({ success: false, error: 'Server Error' }));
      })
    );

    await act(async () => {
      render(<ApiStatus />);
    });

    // Wait for API checks to complete
    await waitFor(() => {
      expect(screen.getByText(/Server:/i)).toBeInTheDocument();
    });

    // Wait for the server status to be updated
    await waitFor(() => {
      expect(screen.getByText(/Online/i)).toBeInTheDocument();
    }, { timeout: 3000 });

    // Wait for the crops API status to be updated
    await waitFor(() => {
      const cropsElement = screen.getByText(/Crops API:/i).nextSibling;
      expect(cropsElement).toHaveTextContent(/Online/i);
    }, { timeout: 3000 });

    // Wait for the climate zones API status to be updated
    await waitFor(() => {
      const climateElement = screen.getByText(/Climate Zones API:/i).nextSibling;
      expect(climateElement).toHaveTextContent(/Offline/i);
    }, { timeout: 3000 });

    // Check for partial status message
    await waitFor(() => {
      expect(screen.getByText(/Some API endpoints are offline/i)).toBeInTheDocument();
    }, { timeout: 3000 });
  });

  it('should handle database connection issues', async () => {
    // Mock console.warn
    const originalWarn = console.warn;
    console.warn = jest.fn();

    // Override the server to return a database connection issue
    server.use(
      rest.get('/api/health', (req, res, ctx) => {
        return res(ctx.json({
          success: true,
          server: { status: 'online' },
          database: { status: 'error', error: 'Connection failed' }
        }));
      })
    );

    await act(async () => {
      render(<ApiStatus />);
    });

    // Wait for API checks to complete
    await waitFor(() => {
      expect(screen.getByText(/Server:/i)).toBeInTheDocument();
    });

    // Wait for the status to be updated
    await waitFor(() => {
      expect(screen.getByText(/Online/i)).toBeInTheDocument();
    }, { timeout: 3000 });

    // Verify console.warn was called
    expect(console.warn).toHaveBeenCalled();

    // Restore console.warn
    console.warn = originalWarn;
  });
});
